#Regularized regression
#Y=b0+b1*X1+b2*X2+e where X1 and X2 are nearly perfectly correlated(co-linear)
#Y=b0+(b1+b2)*X1+e

#Prostate cancer
library(ElemStatLearn)
data(prostate)
str(prostate)

#Model selection approach:split samples
#1.divide data into training/test/validation set
#2.treat validation as test data,train all competing models on the train data
#  and pick the best one on validation
#3.to appropriately assess performance on new data apply to test set
#4.you may re=split and reperform steps 1-3

#Decomposing Expected Prediction Error(EPE)
#Y=f(X)+e
small=prostate[1:5,]
lm(lpsa ~.,data=small)

#Combining predictors
library(ggplot2)
library(caret)
library(ISLR)
data(Wage)
Wage=subset(Wage,select=-c(logwage))
#Create a building data set and validation set
inBuild=createDataPartition(Wage$wage,p=0.7,list=F)
validation=Wage[-inBuild,]
buildData=Wage[inBuild,]
inTrain=createDataPartition(buildData$wage,p=0.7,list=F)
training=buildData[inTrain,]
testing=buildData[-inTrain,]
#build 2 different models
mod1=train(wage ~.,method="glm",data=training)
mod2=train(wage ~.,method="rf",data=training,
           trControl=trainControl(method = "CV"),number=3)
pred1=predict(mod1,testing)
pred2=predict(mod2,testing)
qplot(pred1,pred2,col=wage,data=testing)
#Fit a model that combines predictors
predDF=data.frame(pred1,pred2,wage=testing$wage)
combModFit=train(wage ~.,method="gam",data=predDF)
combPred=predict(combModFit,predDF)
#Predict on validation data set
pred1V=predict(mod1,validation)
pred2V=predict(mod2,validation)
predVDF=data.frame(pred1=pred1V,pred2=pred2V)
combPredV=predict(combModFit,predVDF)


#Forecasting--Time Series data
#Data are dependent over time,long term,periodically

#Google Data
library(quantmod)
from.dat=as.Date("01/01/08"format="%m/%d/%y")
to.dat=as.Date("12/31/13",format="%m/%d/%y")
getSymbols("GOOG",src="google",from=from.dat,to=to.dat)
#Summarize monthly and store as time series
mGoog=to.monthly(GOOG)
googOpen=Op(mGoog)
ts1=ts(googOpen,frequency = 12)
plot(ts1,xlab="Years+1",ylab="GOOG")
#Decompose a time series into parts
plot(decompose(ts1),xlab="Years+1")
#Training and test sets
ts1Train=window(ts1,start=1,end=5)
ts1Test=window(ts1,start=5,end=(7-0.01))
ts1Train
#Simple moving average
plot(ts1Train)
lines(ma(ts1Train,order=3),col="red")
#Exponential smoothing
ets1=ets(ts1Train,model="MMM")
fcast=forecast(ets1)
plot(fcast)
lines(ts1Test,col="red")
#Get the accuracy
accuracy(fcast,ts1Test)

